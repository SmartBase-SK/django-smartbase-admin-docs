{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django-smartbase-admin","text":""},{"location":"#about","title":"About","text":"<p>The SmartBase Admin application for Django is an enhanced administrative interface designed to improve the management of Django-based projects. It offers a more intuitive and feature-rich experience compared to the default Django admin interface. With SmartBase Admin, users benefit from advanced filtering and search capabilities, customizable dashboards, and user-friendly data visualization tools. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Enhanced UI/UX: Provides a more intuitive and user-friendly interface for the Django admin panel.</li> <li>Customizable Dashboards: Allows administrators to create and customize dashboards with various widgets.</li> <li>Advanced Filtering and Search: Offers improved filtering and search capabilities to manage data more efficiently.</li> <li>Role-Based Access Control: Implements granular access control based on user roles to enhance security and management.</li> </ul>"},{"location":"dashboard_functions/","title":"Dashboard functions","text":""},{"location":"dashboard_functions/#dashboard-functions","title":"Dashboard Functions","text":""},{"location":"dashboard_functions/#configuration-files","title":"Configuration files","text":""},{"location":"dashboard_functions/#sbadminconfiguration","title":"SBAdminConfiguration","text":"<p>This function allows us to return a configuration object based on the user's roles. The configuration object should be an instance of <code>SBAdminRoleConfiguration</code>. <pre><code>class SBAdminConfiguration(SBAdminConfigurationBase):\n    def get_configuration_for_roles(self, user_roles):\n        return config\n</code></pre></p>"},{"location":"dashboard_functions/#sbadminroleconfiguration","title":"SBAdminRoleConfiguration","text":"<p>This class is used to configure the dashboard for a specific role. With this configuration we can control what will be displayed in the dashboard and in menu items. </p> <pre><code>class SBAdminRoleConfiguration(metaclass=Singleton):\n    default_view = None  # SBAdminMenuItem usually with view_id=\"dashboard\"\n    registered_views = None  \n    view_map = None\n    autocomplete_map = None\n    menu_items = None\n    global_filter_form = None\n    filters_version = FilterVersions.FILTERS_VERSION_1\n\n    def __init__(\n        self,\n        default_view=None,\n        registered_views=None,\n        menu_items=None,\n        global_filter_form=None,\n        filters_version=None,\n    ) -&gt; None:\n</code></pre>"},{"location":"dashboard_functions/#sbadminmenuitem","title":"SBAdminMenuItem","text":"<p>A class that is used to represent a menu item in the dashboard. It can be used to create a menu item with a label, icon, and sub-items. can be put to the menu_items attribute of <code>SBAdminRoleConfiguration</code>. <pre><code>class SBAdminMenuItem(object):\n    view_id = None\n    view = None\n    icon = None\n    label = None\n    url = None\n    sub_items = None\n    is_active = None\n    parent_menu_item = None\n\n    def __init__(\n        self,\n        view_id=None,\n        icon=None,\n        label=None,\n        url=None,\n        sub_items=None,\n    ) -&gt; None:\n</code></pre></p>"},{"location":"dashboard_functions/#sbadminview","title":"SBAdminView","text":"<p>A class that takes care of the view configuration and what is displayed in the view, it can be put to the as view_id as attribute of <code>SBAdminMenuItem</code>. <pre><code>class SBAdminView(SBAdminBaseQuerysetMixin, SBAdminBaseView):\n    model = None\n    label = None\n    title = None\n    icon = None\n    description = None\n    view_id = None\n    menu_action = None\n    fields = None\n    list_display = None\n    list_per_page = None\n    ordering = None\n    list_template_name = \"sb_admin/actions/list.html\"\n    sub_views = None\n    field_cache = None\n\n    request_data = None\n\n    def __init__(\n        self,\n        model=None,\n        label=None,\n        title=None,\n        icon=None,\n        description=None,\n        view_id=None,\n        menu_action=None,\n        fields=None,\n        list_display=None,\n        list_per_page=None,\n        ordering=None,\n        list_template_name=None,\n        global_filter_data_map=None,\n        sub_views=None,\n    ) -&gt; None:\n</code></pre></p>"},{"location":"dashboard_functions/#sbadminlistaction","title":"SBAdminListAction","text":"<p>A class is used to represent a list action in the dashboard. It can be used to create a list action with a page size, tabulator definition, list actions, and all params. <pre><code>class SBAdminListAction(SBAdminAction):\n    def __init__(\n        self,\n        view,\n        request,\n        page_size=None,\n        tabulator_definition=None,\n        list_actions=None,\n        all_params=None,\n    ) -&gt; None:\n</code></pre></p>"},{"location":"dashboard_functions/#views","title":"Views","text":""},{"location":"dashboard_functions/#sbadminbaseview","title":"SBAdminBaseView","text":"<p>A class that is used to represent a view in the dashboard.  <pre><code>class SBAdmin(\n    SBAdminInlineAndAdminCommon,\n    SBAdminBaseQuerysetMixin,\n    SBAdminBaseListView,\n    SBAdminTranslationStatusMixin,\n    NestedModelAdmin,\n):\n    sbadmin_fieldsets = None\n    sbadmin_previous_next_buttons_enabled = False\n    sbadmin_tabs = None  \n    request_data = None\n    menu_label = None\n</code></pre></p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>pip install django-smartbase-admin\n</code></pre> <p>Install Additional Dependencies</p> <p>Install <code>setuptools</code> using pip:</p> <pre><code>  pip install setuptools\n</code></pre> <p>Add the following packages to your <code>INSTALLED_APPS</code> in <code>settings.py</code>: <pre><code>    INSTALLED_APPS = [\n        ...\n        'django_smartbase_admin',\n        'psycopg2',\n        'easy_thumbnails',\n        'widget_tweaks',\n        'nested_admin',\n        ...\n    ]\n    ```\n</code></pre></p>"},{"location":"quickstart/#configuration","title":"Configuration","text":"<p>Create Configuration File</p> <p>Create a file named <code>sb_admin_configuration.py</code> at the scope of <code>settings.py</code>. Add the following configuration code:</p> <pre><code>from django_smartbase_admin.engine.configuration import SBAdminConfigurationBase, SBAdminRoleConfiguration\nfrom django_smartbase_admin.views.dashboard_view import SBAdminDashboardView\nfrom django_smartbase_admin.engine.menu_item import SBAdminMenuItem\n\nconfig = SBAdminRoleConfiguration(\n    default_view=SBAdminMenuItem(view_id=\"dashboard\"),\n    menu_items=[\n        SBAdminMenuItem(view_id=\"dashboard\", icon=\"All-application\")\n    ],\n    registered_views=[\n        SBAdminDashboardView(widgets=[], title=\"Dashboard\")\n    ]\n)\n\nclass SBAdminConfiguration(SBAdminConfigurationBase):\n    def get_configuration_for_roles(self, user_roles):\n        return config\n</code></pre>"},{"location":"quickstart/#dashboard-widgets","title":"Dashboard widgets","text":"<p>Widgets are components that can be added to the dashboard to display information or provide functionality. The following widget types are available:</p> <p><code>SBAdminDashboardListWidget</code>: Displays a list of items from a model.</p> <p><code>SBAdminDashboardChartWidget</code>: Displays a chart based on data from a model.</p> <p><code>SBAdminDashboardChartWidgetByDate</code>: Displays a chart based on data from a model with date filtering.</p> <p><code>SBAdminDashboardLineChartWidgetByDate</code>: Displays a line chart based on data from a model with date filtering.</p> <p><code>SBAdminChartAggregateSubWidget</code>: Displays an aggregate value from a model.</p> <pre><code>    ...\n    registered_views=[\n        SBAdminDashboardView(\n            widgets=[\n                SBAdminDashboardListWidget(\n                    name=\"Posts\",\n                    model=Post,\n                    list_display=[\"title\", \"published_date\"],\n                    list_per_page=10\n                )\n            ],\n            title=\"Dashboard\",\n        ),\n    ],\n    ...\n</code></pre> <p>Link Configuration</p> <p>Add the path to your configuration file in <code>settings.py</code>:</p> <pre><code>SB_ADMIN_CONFIGURATION = \"config.sbadmin_config.SBAdminConfiguration\"\n```\n</code></pre> <p>Add Middleware</p> <p>Add the <code>LocaleMiddleware</code> to your <code>MIDDLEWARE</code> in <code>settings.py</code>:</p> <pre><code>MIDDLEWARE = [\n    ...\n    'django.middleware.locale.LocaleMiddleware',\n    ...\n]\n```\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":""},{"location":"quickstart/#adding-items-to-side-bars","title":"Adding items to side bars","text":"<p>In file sb_admin_configuration.py, add the following code to add items to the side bar:</p> sb_admin_configuration.py<pre><code>from django_smartbase_admin.engine.menu_item import SBAdminMenuItem\n\nclass SBAdminRoleConfiguration(\n    menu_items = [\n        SBAdminMenuItem(\n            view_id=\"blog_post\",\n            label=\"Post\",\n            sub_items=[], # Fill with sub items for dropdown menu\n            icon=\"Table-report\",\n        ), # Add your menu items here\n    ]\n)\n</code></pre> <p>the sub_items attribute is a list of SBAdminMenuItem  objects that will be displayed as a dropdown menu when the user  hovers over the parent menu item.</p>"},{"location":"quickstart/#registration-of-views","title":"Registration of views","text":"<p>create a file sb_admin.py in same directory as your models.py file  and add the following code to register your models:</p>"},{"location":"quickstart/#simple-views","title":"Simple views","text":"sb_admin.py<pre><code>  @admin.register(Category, site=sb_admin_site)\n  class CategorySBAdmin(SBAdmin):\n      sbadmin_list_display = (\"name\",)\n      sbadmin_fieldsets = [\n          (None, {\n              \"fields\": [\"name\"]\n          })\n      ]\n</code></pre>"},{"location":"quickstart/#views-with-inlines","title":"Views with inlines","text":"sb_admin.py<pre><code>class CategoryInline(SBAdminTableInline):\n    model = Post.categories.through # Many to many relationship model\n\n\n@admin.register(Post, site=sb_admin_site)\nclass PostSBAdmin(SBAdmin):\n    sbadmin_list_display = (\"title\", \"published_date\", \"author\")  # List of fields to display in the list view\n    sbadmin_fieldsets = [\n        (None, {\n            \"fields\": [\"title\", \"content\", \"author\", \"categories\"]  # Fields to display in the form view\n        })\n    ]\n    inlines = [CategoryInline]\n    sbadmin_tabs = {\n        \"Post\": [None],\n        \"Categories\": [CategoryInline]\n    }\n</code></pre>"},{"location":"quickstart/#pagination","title":"Pagination","text":"<p>To set pagination for a view, add the following code to the view class:</p> sb_admin.py<pre><code>@admin.register(Post, site=sb_admin_site)\nclass PostSBAdmin(SBAdmin):\n    list_per_page = 25 # Sets the number of items to display per page\n    sbadmin_list_display = (\"title\", \"published_date\", \"author\")\n    ...\n</code></pre>"}]}